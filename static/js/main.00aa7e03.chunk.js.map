{"version":3,"sources":["components/MemCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/ScoreDetail/index.js","App.js","serviceWorker.js","index.js"],"names":["MemCard","props","react_default","a","createElement","className","onClick","selectMem","id","alt","name","src","image","Wrapper","children","Title","ScoreDetail","score","top_score","try_again","_","require","App","state","mems","console","log","_this","find","mem","selected","newMems","map","setState","shuffle","_this2","this","components_Wrapper","components_Title","components_ScoreDetail","components_MemCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00aa7e03.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction MemCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div onClick={() => props.selectMem(props.id)} className=\"img-container\">\r\n        <img alt={props.name} src={props.image}/>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ScoreDetail(props) {\r\n  return (\r\n    <div className=\"score\">\r\n        <h2>Use the force to not pick the same image twice!</h2>\r\n        <h3>Score: {props.score}</h3>\r\n        <h3>Score: {props.top_score}</h3>\r\n        <p>{props.try_again}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreDetail;\r\n","import React, { Component } from \"react\";\nimport MemCard from \"./components/MemCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport mems from \"./mem.json\";\nimport ScoreDetail from \"./components/ScoreDetail\";\n\nvar _ = require('lodash');\n\nclass App extends Component {\n  // Setting this.state.mems to the mems json array\n  state = {\n    mems,\n    score: 0,\n    top_score: 0,\n    try_again: \"\"\n  };\n\n  selectMem = id => {\n    console.log(id);\n    console.log(this.state.mems);\n    console.log(this.state.mems.find(mem => mem.id === id).selected);\n    if (this.state.mems.find(mem => mem.id === id).selected === true) {\n      let newMems = this.state.mems.map((mem) => {\n        return {\n          id: mem.id,\n          name: mem.name,\n          image: mem.image,\n          selected: false\n        }\n      });\n      this.setState({ mems: _.shuffle(newMems), score: 0, try_again: \"Better Luck Next Time!\" })\n    } else {\n      let newMems = this.state.mems.map((mem) => {\n        if (mem.id === id) {\n          return {\n            id: mem.id,\n            name: mem.name,\n            image: mem.image,\n            selected: true\n          }\n        } else {\n          return mem;\n        }\n      });\n      (this.state.score < this.state.top_score) ? this.setState({ mems: _.shuffle(newMems), score: this.state.score + 1, try_again: \"Well Done. Select Again!\" }) : this.setState({ mems: _.shuffle(newMems), score: this.state.score + 1, top_score: this.state.top_score + 1, try_again: \"The Force is Strong With You! New High Score!\" })\n    }\n  }\n\n  // Map over this.state.mems and render a memCard component for each mem object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Test Your Memory</Title>\n        <ScoreDetail\n          score={this.state.score}\n          top_score={this.state.top_score}\n          try_again={this.state.try_again}\n        />\n        <br></br>\n        {this.state.mems.map(mem => (\n          <MemCard\n            selectMem={this.selectMem}\n            id={mem.id}\n            key={mem.id}\n            name={mem.name}\n            image={mem.image}\n            selected={mem.selected}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}